// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `HDao_gps.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package HDaoGps;

public class BsInfo implements java.lang.Cloneable, java.io.Serializable
{
    public int lac;

    public int cellId;

    public int signal;

    public BsInfo()
    {
    }

    public BsInfo(int lac, int cellId, int signal)
    {
        this.lac = lac;
        this.cellId = cellId;
        this.signal = signal;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        BsInfo _r = null;
        if(rhs instanceof BsInfo)
        {
            _r = (BsInfo)rhs;
        }

        if(_r != null)
        {
            if(lac != _r.lac)
            {
                return false;
            }
            if(cellId != _r.cellId)
            {
                return false;
            }
            if(signal != _r.signal)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::HDaoGps::BsInfo");
        __h = IceInternal.HashUtil.hashAdd(__h, lac);
        __h = IceInternal.HashUtil.hashAdd(__h, cellId);
        __h = IceInternal.HashUtil.hashAdd(__h, signal);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeInt(lac);
        __os.writeInt(cellId);
        __os.writeInt(signal);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        lac = __is.readInt();
        cellId = __is.readInt();
        signal = __is.readInt();
    }

    public static final long serialVersionUID = 2029683662L;
}

// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `HDao_gps.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package HDaoGps;

/**
 * common
 **/
public class GpsRecord implements java.lang.Cloneable, java.io.Serializable
{
    public int gpsTime;

    public int lng;

    public int lat;

    public int alt;

    public int speed;

    public int dir;

    public int gLng;

    public int gLat;

    public int bLng;

    public int bLat;

    public int storeTime;

    public GpsRecord()
    {
    }

    public GpsRecord(int gpsTime, int lng, int lat, int alt, int speed, int dir, int gLng, int gLat, int bLng, int bLat, int storeTime)
    {
        this.gpsTime = gpsTime;
        this.lng = lng;
        this.lat = lat;
        this.alt = alt;
        this.speed = speed;
        this.dir = dir;
        this.gLng = gLng;
        this.gLat = gLat;
        this.bLng = bLng;
        this.bLat = bLat;
        this.storeTime = storeTime;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        GpsRecord _r = null;
        if(rhs instanceof GpsRecord)
        {
            _r = (GpsRecord)rhs;
        }

        if(_r != null)
        {
            if(gpsTime != _r.gpsTime)
            {
                return false;
            }
            if(lng != _r.lng)
            {
                return false;
            }
            if(lat != _r.lat)
            {
                return false;
            }
            if(alt != _r.alt)
            {
                return false;
            }
            if(speed != _r.speed)
            {
                return false;
            }
            if(dir != _r.dir)
            {
                return false;
            }
            if(gLng != _r.gLng)
            {
                return false;
            }
            if(gLat != _r.gLat)
            {
                return false;
            }
            if(bLng != _r.bLng)
            {
                return false;
            }
            if(bLat != _r.bLat)
            {
                return false;
            }
            if(storeTime != _r.storeTime)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::HDaoGps::GpsRecord");
        __h = IceInternal.HashUtil.hashAdd(__h, gpsTime);
        __h = IceInternal.HashUtil.hashAdd(__h, lng);
        __h = IceInternal.HashUtil.hashAdd(__h, lat);
        __h = IceInternal.HashUtil.hashAdd(__h, alt);
        __h = IceInternal.HashUtil.hashAdd(__h, speed);
        __h = IceInternal.HashUtil.hashAdd(__h, dir);
        __h = IceInternal.HashUtil.hashAdd(__h, gLng);
        __h = IceInternal.HashUtil.hashAdd(__h, gLat);
        __h = IceInternal.HashUtil.hashAdd(__h, bLng);
        __h = IceInternal.HashUtil.hashAdd(__h, bLat);
        __h = IceInternal.HashUtil.hashAdd(__h, storeTime);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeInt(gpsTime);
        __os.writeInt(lng);
        __os.writeInt(lat);
        __os.writeInt(alt);
        __os.writeInt(speed);
        __os.writeInt(dir);
        __os.writeInt(gLng);
        __os.writeInt(gLat);
        __os.writeInt(bLng);
        __os.writeInt(bLat);
        __os.writeInt(storeTime);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        gpsTime = __is.readInt();
        lng = __is.readInt();
        lat = __is.readInt();
        alt = __is.readInt();
        speed = __is.readInt();
        dir = __is.readInt();
        gLng = __is.readInt();
        gLat = __is.readInt();
        bLng = __is.readInt();
        bLat = __is.readInt();
        storeTime = __is.readInt();
    }

    public static final long serialVersionUID = -2100706939L;
}

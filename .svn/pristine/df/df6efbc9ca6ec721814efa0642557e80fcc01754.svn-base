// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `HDao_gps.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package HDaoGps;

public final class DaoGpsServicePrxHelper extends Ice.ObjectPrxHelperBase implements DaoGpsServicePrx
{
    private static final String __getBsRecords_name = "getBsRecords";

    public boolean getBsRecords(BsGetRequest req, BsGetResponseHolder res)
    {
        return getBsRecords(req, res, null, false);
    }

    public boolean getBsRecords(BsGetRequest req, BsGetResponseHolder res, java.util.Map<String, String> __ctx)
    {
        return getBsRecords(req, res, __ctx, true);
    }

    private boolean getBsRecords(BsGetRequest req, BsGetResponseHolder res, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getBsRecords", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getBsRecords");
                    __delBase = __getDelegate(false);
                    _DaoGpsServiceDel __del = (_DaoGpsServiceDel)__delBase;
                    return __del.getBsRecords(req, res, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getBsRecords(BsGetRequest req)
    {
        return begin_getBsRecords(req, null, false, null);
    }

    public Ice.AsyncResult begin_getBsRecords(BsGetRequest req, java.util.Map<String, String> __ctx)
    {
        return begin_getBsRecords(req, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getBsRecords(BsGetRequest req, Ice.Callback __cb)
    {
        return begin_getBsRecords(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getBsRecords(BsGetRequest req, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getBsRecords(req, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getBsRecords(BsGetRequest req, Callback_DaoGpsService_getBsRecords __cb)
    {
        return begin_getBsRecords(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getBsRecords(BsGetRequest req, java.util.Map<String, String> __ctx, Callback_DaoGpsService_getBsRecords __cb)
    {
        return begin_getBsRecords(req, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getBsRecords(BsGetRequest req, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getBsRecords_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getBsRecords_name, __cb);
        try
        {
            __result.__prepare(__getBsRecords_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            req.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getBsRecords(BsGetResponseHolder res, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getBsRecords_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            res.value = new BsGetResponse();
            res.value.__read(__is);
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getBsWorkModeRecords_name = "getBsWorkModeRecords";

    public boolean getBsWorkModeRecords(BsWorkModeGetRequest req, BsWorkModeGetResponseHolder res)
    {
        return getBsWorkModeRecords(req, res, null, false);
    }

    public boolean getBsWorkModeRecords(BsWorkModeGetRequest req, BsWorkModeGetResponseHolder res, java.util.Map<String, String> __ctx)
    {
        return getBsWorkModeRecords(req, res, __ctx, true);
    }

    private boolean getBsWorkModeRecords(BsWorkModeGetRequest req, BsWorkModeGetResponseHolder res, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getBsWorkModeRecords", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getBsWorkModeRecords");
                    __delBase = __getDelegate(false);
                    _DaoGpsServiceDel __del = (_DaoGpsServiceDel)__delBase;
                    return __del.getBsWorkModeRecords(req, res, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getBsWorkModeRecords(BsWorkModeGetRequest req)
    {
        return begin_getBsWorkModeRecords(req, null, false, null);
    }

    public Ice.AsyncResult begin_getBsWorkModeRecords(BsWorkModeGetRequest req, java.util.Map<String, String> __ctx)
    {
        return begin_getBsWorkModeRecords(req, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getBsWorkModeRecords(BsWorkModeGetRequest req, Ice.Callback __cb)
    {
        return begin_getBsWorkModeRecords(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getBsWorkModeRecords(BsWorkModeGetRequest req, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getBsWorkModeRecords(req, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getBsWorkModeRecords(BsWorkModeGetRequest req, Callback_DaoGpsService_getBsWorkModeRecords __cb)
    {
        return begin_getBsWorkModeRecords(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getBsWorkModeRecords(BsWorkModeGetRequest req, java.util.Map<String, String> __ctx, Callback_DaoGpsService_getBsWorkModeRecords __cb)
    {
        return begin_getBsWorkModeRecords(req, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getBsWorkModeRecords(BsWorkModeGetRequest req, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getBsWorkModeRecords_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getBsWorkModeRecords_name, __cb);
        try
        {
            __result.__prepare(__getBsWorkModeRecords_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            req.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getBsWorkModeRecords(BsWorkModeGetResponseHolder res, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getBsWorkModeRecords_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            res.value = new BsWorkModeGetResponse();
            res.value.__read(__is);
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getDataCardInfo_name = "getDataCardInfo";

    public boolean getDataCardInfo(DataCardGetRequest req, DataCardGetResponseHolder res)
    {
        return getDataCardInfo(req, res, null, false);
    }

    public boolean getDataCardInfo(DataCardGetRequest req, DataCardGetResponseHolder res, java.util.Map<String, String> __ctx)
    {
        return getDataCardInfo(req, res, __ctx, true);
    }

    private boolean getDataCardInfo(DataCardGetRequest req, DataCardGetResponseHolder res, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getDataCardInfo", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getDataCardInfo");
                    __delBase = __getDelegate(false);
                    _DaoGpsServiceDel __del = (_DaoGpsServiceDel)__delBase;
                    return __del.getDataCardInfo(req, res, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getDataCardInfo(DataCardGetRequest req)
    {
        return begin_getDataCardInfo(req, null, false, null);
    }

    public Ice.AsyncResult begin_getDataCardInfo(DataCardGetRequest req, java.util.Map<String, String> __ctx)
    {
        return begin_getDataCardInfo(req, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getDataCardInfo(DataCardGetRequest req, Ice.Callback __cb)
    {
        return begin_getDataCardInfo(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getDataCardInfo(DataCardGetRequest req, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getDataCardInfo(req, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getDataCardInfo(DataCardGetRequest req, Callback_DaoGpsService_getDataCardInfo __cb)
    {
        return begin_getDataCardInfo(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getDataCardInfo(DataCardGetRequest req, java.util.Map<String, String> __ctx, Callback_DaoGpsService_getDataCardInfo __cb)
    {
        return begin_getDataCardInfo(req, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getDataCardInfo(DataCardGetRequest req, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getDataCardInfo_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getDataCardInfo_name, __cb);
        try
        {
            __result.__prepare(__getDataCardInfo_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            req.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getDataCardInfo(DataCardGetResponseHolder res, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getDataCardInfo_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            res.value = new DataCardGetResponse();
            res.value.__read(__is);
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getDayLastGpsRecord_name = "getDayLastGpsRecord";

    public boolean getDayLastGpsRecord(DayLastGpsGetRequest req, DayLastGpsGetResponseHolder res)
    {
        return getDayLastGpsRecord(req, res, null, false);
    }

    public boolean getDayLastGpsRecord(DayLastGpsGetRequest req, DayLastGpsGetResponseHolder res, java.util.Map<String, String> __ctx)
    {
        return getDayLastGpsRecord(req, res, __ctx, true);
    }

    private boolean getDayLastGpsRecord(DayLastGpsGetRequest req, DayLastGpsGetResponseHolder res, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getDayLastGpsRecord", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getDayLastGpsRecord");
                    __delBase = __getDelegate(false);
                    _DaoGpsServiceDel __del = (_DaoGpsServiceDel)__delBase;
                    return __del.getDayLastGpsRecord(req, res, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getDayLastGpsRecord(DayLastGpsGetRequest req)
    {
        return begin_getDayLastGpsRecord(req, null, false, null);
    }

    public Ice.AsyncResult begin_getDayLastGpsRecord(DayLastGpsGetRequest req, java.util.Map<String, String> __ctx)
    {
        return begin_getDayLastGpsRecord(req, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getDayLastGpsRecord(DayLastGpsGetRequest req, Ice.Callback __cb)
    {
        return begin_getDayLastGpsRecord(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getDayLastGpsRecord(DayLastGpsGetRequest req, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getDayLastGpsRecord(req, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getDayLastGpsRecord(DayLastGpsGetRequest req, Callback_DaoGpsService_getDayLastGpsRecord __cb)
    {
        return begin_getDayLastGpsRecord(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getDayLastGpsRecord(DayLastGpsGetRequest req, java.util.Map<String, String> __ctx, Callback_DaoGpsService_getDayLastGpsRecord __cb)
    {
        return begin_getDayLastGpsRecord(req, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getDayLastGpsRecord(DayLastGpsGetRequest req, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getDayLastGpsRecord_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getDayLastGpsRecord_name, __cb);
        try
        {
            __result.__prepare(__getDayLastGpsRecord_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            req.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getDayLastGpsRecord(DayLastGpsGetResponseHolder res, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getDayLastGpsRecord_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            res.value = new DayLastGpsGetResponse();
            res.value.__read(__is);
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getFirstBsRecord_name = "getFirstBsRecord";

    public boolean getFirstBsRecord(BsGetRequest req, BsGetResponseHolder res)
    {
        return getFirstBsRecord(req, res, null, false);
    }

    public boolean getFirstBsRecord(BsGetRequest req, BsGetResponseHolder res, java.util.Map<String, String> __ctx)
    {
        return getFirstBsRecord(req, res, __ctx, true);
    }

    private boolean getFirstBsRecord(BsGetRequest req, BsGetResponseHolder res, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getFirstBsRecord", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getFirstBsRecord");
                    __delBase = __getDelegate(false);
                    _DaoGpsServiceDel __del = (_DaoGpsServiceDel)__delBase;
                    return __del.getFirstBsRecord(req, res, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getFirstBsRecord(BsGetRequest req)
    {
        return begin_getFirstBsRecord(req, null, false, null);
    }

    public Ice.AsyncResult begin_getFirstBsRecord(BsGetRequest req, java.util.Map<String, String> __ctx)
    {
        return begin_getFirstBsRecord(req, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getFirstBsRecord(BsGetRequest req, Ice.Callback __cb)
    {
        return begin_getFirstBsRecord(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getFirstBsRecord(BsGetRequest req, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getFirstBsRecord(req, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getFirstBsRecord(BsGetRequest req, Callback_DaoGpsService_getFirstBsRecord __cb)
    {
        return begin_getFirstBsRecord(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getFirstBsRecord(BsGetRequest req, java.util.Map<String, String> __ctx, Callback_DaoGpsService_getFirstBsRecord __cb)
    {
        return begin_getFirstBsRecord(req, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getFirstBsRecord(BsGetRequest req, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getFirstBsRecord_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getFirstBsRecord_name, __cb);
        try
        {
            __result.__prepare(__getFirstBsRecord_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            req.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getFirstBsRecord(BsGetResponseHolder res, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getFirstBsRecord_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            res.value = new BsGetResponse();
            res.value.__read(__is);
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getFirstGpsBsRecord_name = "getFirstGpsBsRecord";

    public boolean getFirstGpsBsRecord(GpsGetRequest req, GpsBsGetResponseHolder res)
    {
        return getFirstGpsBsRecord(req, res, null, false);
    }

    public boolean getFirstGpsBsRecord(GpsGetRequest req, GpsBsGetResponseHolder res, java.util.Map<String, String> __ctx)
    {
        return getFirstGpsBsRecord(req, res, __ctx, true);
    }

    private boolean getFirstGpsBsRecord(GpsGetRequest req, GpsBsGetResponseHolder res, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getFirstGpsBsRecord", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getFirstGpsBsRecord");
                    __delBase = __getDelegate(false);
                    _DaoGpsServiceDel __del = (_DaoGpsServiceDel)__delBase;
                    return __del.getFirstGpsBsRecord(req, res, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getFirstGpsBsRecord(GpsGetRequest req)
    {
        return begin_getFirstGpsBsRecord(req, null, false, null);
    }

    public Ice.AsyncResult begin_getFirstGpsBsRecord(GpsGetRequest req, java.util.Map<String, String> __ctx)
    {
        return begin_getFirstGpsBsRecord(req, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getFirstGpsBsRecord(GpsGetRequest req, Ice.Callback __cb)
    {
        return begin_getFirstGpsBsRecord(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getFirstGpsBsRecord(GpsGetRequest req, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getFirstGpsBsRecord(req, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getFirstGpsBsRecord(GpsGetRequest req, Callback_DaoGpsService_getFirstGpsBsRecord __cb)
    {
        return begin_getFirstGpsBsRecord(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getFirstGpsBsRecord(GpsGetRequest req, java.util.Map<String, String> __ctx, Callback_DaoGpsService_getFirstGpsBsRecord __cb)
    {
        return begin_getFirstGpsBsRecord(req, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getFirstGpsBsRecord(GpsGetRequest req, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getFirstGpsBsRecord_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getFirstGpsBsRecord_name, __cb);
        try
        {
            __result.__prepare(__getFirstGpsBsRecord_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            req.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getFirstGpsBsRecord(GpsBsGetResponseHolder res, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getFirstGpsBsRecord_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            res.value = new GpsBsGetResponse();
            res.value.__read(__is);
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getFirstGpsRecord_name = "getFirstGpsRecord";

    public boolean getFirstGpsRecord(GpsGetRequest req, GpsGetResponseHolder res)
    {
        return getFirstGpsRecord(req, res, null, false);
    }

    public boolean getFirstGpsRecord(GpsGetRequest req, GpsGetResponseHolder res, java.util.Map<String, String> __ctx)
    {
        return getFirstGpsRecord(req, res, __ctx, true);
    }

    private boolean getFirstGpsRecord(GpsGetRequest req, GpsGetResponseHolder res, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getFirstGpsRecord", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getFirstGpsRecord");
                    __delBase = __getDelegate(false);
                    _DaoGpsServiceDel __del = (_DaoGpsServiceDel)__delBase;
                    return __del.getFirstGpsRecord(req, res, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getFirstGpsRecord(GpsGetRequest req)
    {
        return begin_getFirstGpsRecord(req, null, false, null);
    }

    public Ice.AsyncResult begin_getFirstGpsRecord(GpsGetRequest req, java.util.Map<String, String> __ctx)
    {
        return begin_getFirstGpsRecord(req, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getFirstGpsRecord(GpsGetRequest req, Ice.Callback __cb)
    {
        return begin_getFirstGpsRecord(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getFirstGpsRecord(GpsGetRequest req, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getFirstGpsRecord(req, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getFirstGpsRecord(GpsGetRequest req, Callback_DaoGpsService_getFirstGpsRecord __cb)
    {
        return begin_getFirstGpsRecord(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getFirstGpsRecord(GpsGetRequest req, java.util.Map<String, String> __ctx, Callback_DaoGpsService_getFirstGpsRecord __cb)
    {
        return begin_getFirstGpsRecord(req, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getFirstGpsRecord(GpsGetRequest req, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getFirstGpsRecord_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getFirstGpsRecord_name, __cb);
        try
        {
            __result.__prepare(__getFirstGpsRecord_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            req.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getFirstGpsRecord(GpsGetResponseHolder res, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getFirstGpsRecord_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            res.value = new GpsGetResponse();
            res.value.__read(__is);
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getGpsBsRecords_name = "getGpsBsRecords";

    public boolean getGpsBsRecords(GpsGetRequest req, GpsBsGetResponseHolder res)
    {
        return getGpsBsRecords(req, res, null, false);
    }

    public boolean getGpsBsRecords(GpsGetRequest req, GpsBsGetResponseHolder res, java.util.Map<String, String> __ctx)
    {
        return getGpsBsRecords(req, res, __ctx, true);
    }

    private boolean getGpsBsRecords(GpsGetRequest req, GpsBsGetResponseHolder res, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getGpsBsRecords", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getGpsBsRecords");
                    __delBase = __getDelegate(false);
                    _DaoGpsServiceDel __del = (_DaoGpsServiceDel)__delBase;
                    return __del.getGpsBsRecords(req, res, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getGpsBsRecords(GpsGetRequest req)
    {
        return begin_getGpsBsRecords(req, null, false, null);
    }

    public Ice.AsyncResult begin_getGpsBsRecords(GpsGetRequest req, java.util.Map<String, String> __ctx)
    {
        return begin_getGpsBsRecords(req, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getGpsBsRecords(GpsGetRequest req, Ice.Callback __cb)
    {
        return begin_getGpsBsRecords(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getGpsBsRecords(GpsGetRequest req, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getGpsBsRecords(req, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getGpsBsRecords(GpsGetRequest req, Callback_DaoGpsService_getGpsBsRecords __cb)
    {
        return begin_getGpsBsRecords(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getGpsBsRecords(GpsGetRequest req, java.util.Map<String, String> __ctx, Callback_DaoGpsService_getGpsBsRecords __cb)
    {
        return begin_getGpsBsRecords(req, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getGpsBsRecords(GpsGetRequest req, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getGpsBsRecords_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getGpsBsRecords_name, __cb);
        try
        {
            __result.__prepare(__getGpsBsRecords_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            req.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getGpsBsRecords(GpsBsGetResponseHolder res, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getGpsBsRecords_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            res.value = new GpsBsGetResponse();
            res.value.__read(__is);
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getGpsRecords_name = "getGpsRecords";

    public boolean getGpsRecords(GpsGetRequest req, GpsGetResponseHolder res)
    {
        return getGpsRecords(req, res, null, false);
    }

    public boolean getGpsRecords(GpsGetRequest req, GpsGetResponseHolder res, java.util.Map<String, String> __ctx)
    {
        return getGpsRecords(req, res, __ctx, true);
    }

    private boolean getGpsRecords(GpsGetRequest req, GpsGetResponseHolder res, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getGpsRecords", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getGpsRecords");
                    __delBase = __getDelegate(false);
                    _DaoGpsServiceDel __del = (_DaoGpsServiceDel)__delBase;
                    return __del.getGpsRecords(req, res, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getGpsRecords(GpsGetRequest req)
    {
        return begin_getGpsRecords(req, null, false, null);
    }

    public Ice.AsyncResult begin_getGpsRecords(GpsGetRequest req, java.util.Map<String, String> __ctx)
    {
        return begin_getGpsRecords(req, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getGpsRecords(GpsGetRequest req, Ice.Callback __cb)
    {
        return begin_getGpsRecords(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getGpsRecords(GpsGetRequest req, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getGpsRecords(req, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getGpsRecords(GpsGetRequest req, Callback_DaoGpsService_getGpsRecords __cb)
    {
        return begin_getGpsRecords(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getGpsRecords(GpsGetRequest req, java.util.Map<String, String> __ctx, Callback_DaoGpsService_getGpsRecords __cb)
    {
        return begin_getGpsRecords(req, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getGpsRecords(GpsGetRequest req, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getGpsRecords_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getGpsRecords_name, __cb);
        try
        {
            __result.__prepare(__getGpsRecords_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            req.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getGpsRecords(GpsGetResponseHolder res, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getGpsRecords_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            res.value = new GpsGetResponse();
            res.value.__read(__is);
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getGpsRecordsByImei_name = "getGpsRecordsByImei";

    public boolean getGpsRecordsByImei(GpsGetRequest req, GpsGetExResponseHolder res)
    {
        return getGpsRecordsByImei(req, res, null, false);
    }

    public boolean getGpsRecordsByImei(GpsGetRequest req, GpsGetExResponseHolder res, java.util.Map<String, String> __ctx)
    {
        return getGpsRecordsByImei(req, res, __ctx, true);
    }

    private boolean getGpsRecordsByImei(GpsGetRequest req, GpsGetExResponseHolder res, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getGpsRecordsByImei", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getGpsRecordsByImei");
                    __delBase = __getDelegate(false);
                    _DaoGpsServiceDel __del = (_DaoGpsServiceDel)__delBase;
                    return __del.getGpsRecordsByImei(req, res, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getGpsRecordsByImei(GpsGetRequest req)
    {
        return begin_getGpsRecordsByImei(req, null, false, null);
    }

    public Ice.AsyncResult begin_getGpsRecordsByImei(GpsGetRequest req, java.util.Map<String, String> __ctx)
    {
        return begin_getGpsRecordsByImei(req, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getGpsRecordsByImei(GpsGetRequest req, Ice.Callback __cb)
    {
        return begin_getGpsRecordsByImei(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getGpsRecordsByImei(GpsGetRequest req, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getGpsRecordsByImei(req, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getGpsRecordsByImei(GpsGetRequest req, Callback_DaoGpsService_getGpsRecordsByImei __cb)
    {
        return begin_getGpsRecordsByImei(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getGpsRecordsByImei(GpsGetRequest req, java.util.Map<String, String> __ctx, Callback_DaoGpsService_getGpsRecordsByImei __cb)
    {
        return begin_getGpsRecordsByImei(req, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getGpsRecordsByImei(GpsGetRequest req, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getGpsRecordsByImei_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getGpsRecordsByImei_name, __cb);
        try
        {
            __result.__prepare(__getGpsRecordsByImei_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            req.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getGpsRecordsByImei(GpsGetExResponseHolder res, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getGpsRecordsByImei_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            res.value = new GpsGetExResponse();
            res.value.__read(__is);
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getGpsRecordsByMapSn_name = "getGpsRecordsByMapSn";

    public boolean getGpsRecordsByMapSn(GpsGetExRequest req, GpsGetExResponseHolder res)
    {
        return getGpsRecordsByMapSn(req, res, null, false);
    }

    public boolean getGpsRecordsByMapSn(GpsGetExRequest req, GpsGetExResponseHolder res, java.util.Map<String, String> __ctx)
    {
        return getGpsRecordsByMapSn(req, res, __ctx, true);
    }

    private boolean getGpsRecordsByMapSn(GpsGetExRequest req, GpsGetExResponseHolder res, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getGpsRecordsByMapSn", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getGpsRecordsByMapSn");
                    __delBase = __getDelegate(false);
                    _DaoGpsServiceDel __del = (_DaoGpsServiceDel)__delBase;
                    return __del.getGpsRecordsByMapSn(req, res, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getGpsRecordsByMapSn(GpsGetExRequest req)
    {
        return begin_getGpsRecordsByMapSn(req, null, false, null);
    }

    public Ice.AsyncResult begin_getGpsRecordsByMapSn(GpsGetExRequest req, java.util.Map<String, String> __ctx)
    {
        return begin_getGpsRecordsByMapSn(req, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getGpsRecordsByMapSn(GpsGetExRequest req, Ice.Callback __cb)
    {
        return begin_getGpsRecordsByMapSn(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getGpsRecordsByMapSn(GpsGetExRequest req, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getGpsRecordsByMapSn(req, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getGpsRecordsByMapSn(GpsGetExRequest req, Callback_DaoGpsService_getGpsRecordsByMapSn __cb)
    {
        return begin_getGpsRecordsByMapSn(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getGpsRecordsByMapSn(GpsGetExRequest req, java.util.Map<String, String> __ctx, Callback_DaoGpsService_getGpsRecordsByMapSn __cb)
    {
        return begin_getGpsRecordsByMapSn(req, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getGpsRecordsByMapSn(GpsGetExRequest req, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getGpsRecordsByMapSn_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getGpsRecordsByMapSn_name, __cb);
        try
        {
            __result.__prepare(__getGpsRecordsByMapSn_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            req.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getGpsRecordsByMapSn(GpsGetExResponseHolder res, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getGpsRecordsByMapSn_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            res.value = new GpsGetExResponse();
            res.value.__read(__is);
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getGpsRecordsEx_name = "getGpsRecordsEx";

    public boolean getGpsRecordsEx(GpsGetRequest req, GpsGetExResponseHolder res)
    {
        return getGpsRecordsEx(req, res, null, false);
    }

    public boolean getGpsRecordsEx(GpsGetRequest req, GpsGetExResponseHolder res, java.util.Map<String, String> __ctx)
    {
        return getGpsRecordsEx(req, res, __ctx, true);
    }

    private boolean getGpsRecordsEx(GpsGetRequest req, GpsGetExResponseHolder res, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getGpsRecordsEx", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getGpsRecordsEx");
                    __delBase = __getDelegate(false);
                    _DaoGpsServiceDel __del = (_DaoGpsServiceDel)__delBase;
                    return __del.getGpsRecordsEx(req, res, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getGpsRecordsEx(GpsGetRequest req)
    {
        return begin_getGpsRecordsEx(req, null, false, null);
    }

    public Ice.AsyncResult begin_getGpsRecordsEx(GpsGetRequest req, java.util.Map<String, String> __ctx)
    {
        return begin_getGpsRecordsEx(req, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getGpsRecordsEx(GpsGetRequest req, Ice.Callback __cb)
    {
        return begin_getGpsRecordsEx(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getGpsRecordsEx(GpsGetRequest req, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getGpsRecordsEx(req, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getGpsRecordsEx(GpsGetRequest req, Callback_DaoGpsService_getGpsRecordsEx __cb)
    {
        return begin_getGpsRecordsEx(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getGpsRecordsEx(GpsGetRequest req, java.util.Map<String, String> __ctx, Callback_DaoGpsService_getGpsRecordsEx __cb)
    {
        return begin_getGpsRecordsEx(req, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getGpsRecordsEx(GpsGetRequest req, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getGpsRecordsEx_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getGpsRecordsEx_name, __cb);
        try
        {
            __result.__prepare(__getGpsRecordsEx_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            req.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getGpsRecordsEx(GpsGetExResponseHolder res, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getGpsRecordsEx_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            res.value = new GpsGetExResponse();
            res.value.__read(__is);
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getGpsWorkModeRecords_name = "getGpsWorkModeRecords";

    public boolean getGpsWorkModeRecords(GpsWorkModeGetRequest req, GpsWorkModeGetResponseHolder res)
    {
        return getGpsWorkModeRecords(req, res, null, false);
    }

    public boolean getGpsWorkModeRecords(GpsWorkModeGetRequest req, GpsWorkModeGetResponseHolder res, java.util.Map<String, String> __ctx)
    {
        return getGpsWorkModeRecords(req, res, __ctx, true);
    }

    private boolean getGpsWorkModeRecords(GpsWorkModeGetRequest req, GpsWorkModeGetResponseHolder res, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getGpsWorkModeRecords", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getGpsWorkModeRecords");
                    __delBase = __getDelegate(false);
                    _DaoGpsServiceDel __del = (_DaoGpsServiceDel)__delBase;
                    return __del.getGpsWorkModeRecords(req, res, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getGpsWorkModeRecords(GpsWorkModeGetRequest req)
    {
        return begin_getGpsWorkModeRecords(req, null, false, null);
    }

    public Ice.AsyncResult begin_getGpsWorkModeRecords(GpsWorkModeGetRequest req, java.util.Map<String, String> __ctx)
    {
        return begin_getGpsWorkModeRecords(req, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getGpsWorkModeRecords(GpsWorkModeGetRequest req, Ice.Callback __cb)
    {
        return begin_getGpsWorkModeRecords(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getGpsWorkModeRecords(GpsWorkModeGetRequest req, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getGpsWorkModeRecords(req, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getGpsWorkModeRecords(GpsWorkModeGetRequest req, Callback_DaoGpsService_getGpsWorkModeRecords __cb)
    {
        return begin_getGpsWorkModeRecords(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getGpsWorkModeRecords(GpsWorkModeGetRequest req, java.util.Map<String, String> __ctx, Callback_DaoGpsService_getGpsWorkModeRecords __cb)
    {
        return begin_getGpsWorkModeRecords(req, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getGpsWorkModeRecords(GpsWorkModeGetRequest req, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getGpsWorkModeRecords_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getGpsWorkModeRecords_name, __cb);
        try
        {
            __result.__prepare(__getGpsWorkModeRecords_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            req.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getGpsWorkModeRecords(GpsWorkModeGetResponseHolder res, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getGpsWorkModeRecords_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            res.value = new GpsWorkModeGetResponse();
            res.value.__read(__is);
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getLatestBatteryRecord_name = "getLatestBatteryRecord";

    public boolean getLatestBatteryRecord(LatestBatteryGetRequest req, LatestBatteryGetResponseHolder res)
    {
        return getLatestBatteryRecord(req, res, null, false);
    }

    public boolean getLatestBatteryRecord(LatestBatteryGetRequest req, LatestBatteryGetResponseHolder res, java.util.Map<String, String> __ctx)
    {
        return getLatestBatteryRecord(req, res, __ctx, true);
    }

    private boolean getLatestBatteryRecord(LatestBatteryGetRequest req, LatestBatteryGetResponseHolder res, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getLatestBatteryRecord", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getLatestBatteryRecord");
                    __delBase = __getDelegate(false);
                    _DaoGpsServiceDel __del = (_DaoGpsServiceDel)__delBase;
                    return __del.getLatestBatteryRecord(req, res, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getLatestBatteryRecord(LatestBatteryGetRequest req)
    {
        return begin_getLatestBatteryRecord(req, null, false, null);
    }

    public Ice.AsyncResult begin_getLatestBatteryRecord(LatestBatteryGetRequest req, java.util.Map<String, String> __ctx)
    {
        return begin_getLatestBatteryRecord(req, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getLatestBatteryRecord(LatestBatteryGetRequest req, Ice.Callback __cb)
    {
        return begin_getLatestBatteryRecord(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getLatestBatteryRecord(LatestBatteryGetRequest req, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getLatestBatteryRecord(req, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getLatestBatteryRecord(LatestBatteryGetRequest req, Callback_DaoGpsService_getLatestBatteryRecord __cb)
    {
        return begin_getLatestBatteryRecord(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getLatestBatteryRecord(LatestBatteryGetRequest req, java.util.Map<String, String> __ctx, Callback_DaoGpsService_getLatestBatteryRecord __cb)
    {
        return begin_getLatestBatteryRecord(req, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getLatestBatteryRecord(LatestBatteryGetRequest req, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getLatestBatteryRecord_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getLatestBatteryRecord_name, __cb);
        try
        {
            __result.__prepare(__getLatestBatteryRecord_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            req.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getLatestBatteryRecord(LatestBatteryGetResponseHolder res, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getLatestBatteryRecord_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            res.value = new LatestBatteryGetResponse();
            res.value.__read(__is);
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getLatestBsRecord_name = "getLatestBsRecord";

    public boolean getLatestBsRecord(LatestBsGetRequest req, LatestBsGetResponseHolder res)
    {
        return getLatestBsRecord(req, res, null, false);
    }

    public boolean getLatestBsRecord(LatestBsGetRequest req, LatestBsGetResponseHolder res, java.util.Map<String, String> __ctx)
    {
        return getLatestBsRecord(req, res, __ctx, true);
    }

    private boolean getLatestBsRecord(LatestBsGetRequest req, LatestBsGetResponseHolder res, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getLatestBsRecord", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getLatestBsRecord");
                    __delBase = __getDelegate(false);
                    _DaoGpsServiceDel __del = (_DaoGpsServiceDel)__delBase;
                    return __del.getLatestBsRecord(req, res, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getLatestBsRecord(LatestBsGetRequest req)
    {
        return begin_getLatestBsRecord(req, null, false, null);
    }

    public Ice.AsyncResult begin_getLatestBsRecord(LatestBsGetRequest req, java.util.Map<String, String> __ctx)
    {
        return begin_getLatestBsRecord(req, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getLatestBsRecord(LatestBsGetRequest req, Ice.Callback __cb)
    {
        return begin_getLatestBsRecord(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getLatestBsRecord(LatestBsGetRequest req, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getLatestBsRecord(req, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getLatestBsRecord(LatestBsGetRequest req, Callback_DaoGpsService_getLatestBsRecord __cb)
    {
        return begin_getLatestBsRecord(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getLatestBsRecord(LatestBsGetRequest req, java.util.Map<String, String> __ctx, Callback_DaoGpsService_getLatestBsRecord __cb)
    {
        return begin_getLatestBsRecord(req, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getLatestBsRecord(LatestBsGetRequest req, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getLatestBsRecord_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getLatestBsRecord_name, __cb);
        try
        {
            __result.__prepare(__getLatestBsRecord_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            req.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getLatestBsRecord(LatestBsGetResponseHolder res, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getLatestBsRecord_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            res.value = new LatestBsGetResponse();
            res.value.__read(__is);
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getLatestGpsRecord_name = "getLatestGpsRecord";

    public boolean getLatestGpsRecord(LatestGpsGetRequest req, LatestGpsGetResponseHolder res)
    {
        return getLatestGpsRecord(req, res, null, false);
    }

    public boolean getLatestGpsRecord(LatestGpsGetRequest req, LatestGpsGetResponseHolder res, java.util.Map<String, String> __ctx)
    {
        return getLatestGpsRecord(req, res, __ctx, true);
    }

    private boolean getLatestGpsRecord(LatestGpsGetRequest req, LatestGpsGetResponseHolder res, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getLatestGpsRecord", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getLatestGpsRecord");
                    __delBase = __getDelegate(false);
                    _DaoGpsServiceDel __del = (_DaoGpsServiceDel)__delBase;
                    return __del.getLatestGpsRecord(req, res, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getLatestGpsRecord(LatestGpsGetRequest req)
    {
        return begin_getLatestGpsRecord(req, null, false, null);
    }

    public Ice.AsyncResult begin_getLatestGpsRecord(LatestGpsGetRequest req, java.util.Map<String, String> __ctx)
    {
        return begin_getLatestGpsRecord(req, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getLatestGpsRecord(LatestGpsGetRequest req, Ice.Callback __cb)
    {
        return begin_getLatestGpsRecord(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getLatestGpsRecord(LatestGpsGetRequest req, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getLatestGpsRecord(req, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getLatestGpsRecord(LatestGpsGetRequest req, Callback_DaoGpsService_getLatestGpsRecord __cb)
    {
        return begin_getLatestGpsRecord(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getLatestGpsRecord(LatestGpsGetRequest req, java.util.Map<String, String> __ctx, Callback_DaoGpsService_getLatestGpsRecord __cb)
    {
        return begin_getLatestGpsRecord(req, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getLatestGpsRecord(LatestGpsGetRequest req, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getLatestGpsRecord_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getLatestGpsRecord_name, __cb);
        try
        {
            __result.__prepare(__getLatestGpsRecord_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            req.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getLatestGpsRecord(LatestGpsGetResponseHolder res, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getLatestGpsRecord_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            res.value = new LatestGpsGetResponse();
            res.value.__read(__is);
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getLatestGpsRecordByImei_name = "getLatestGpsRecordByImei";

    public boolean getLatestGpsRecordByImei(LatestGpsGetRequestWithBindTime req, LatestGpsGetResponseHolder res)
    {
        return getLatestGpsRecordByImei(req, res, null, false);
    }

    public boolean getLatestGpsRecordByImei(LatestGpsGetRequestWithBindTime req, LatestGpsGetResponseHolder res, java.util.Map<String, String> __ctx)
    {
        return getLatestGpsRecordByImei(req, res, __ctx, true);
    }

    private boolean getLatestGpsRecordByImei(LatestGpsGetRequestWithBindTime req, LatestGpsGetResponseHolder res, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getLatestGpsRecordByImei", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getLatestGpsRecordByImei");
                    __delBase = __getDelegate(false);
                    _DaoGpsServiceDel __del = (_DaoGpsServiceDel)__delBase;
                    return __del.getLatestGpsRecordByImei(req, res, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getLatestGpsRecordByImei(LatestGpsGetRequestWithBindTime req)
    {
        return begin_getLatestGpsRecordByImei(req, null, false, null);
    }

    public Ice.AsyncResult begin_getLatestGpsRecordByImei(LatestGpsGetRequestWithBindTime req, java.util.Map<String, String> __ctx)
    {
        return begin_getLatestGpsRecordByImei(req, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getLatestGpsRecordByImei(LatestGpsGetRequestWithBindTime req, Ice.Callback __cb)
    {
        return begin_getLatestGpsRecordByImei(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getLatestGpsRecordByImei(LatestGpsGetRequestWithBindTime req, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getLatestGpsRecordByImei(req, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getLatestGpsRecordByImei(LatestGpsGetRequestWithBindTime req, Callback_DaoGpsService_getLatestGpsRecordByImei __cb)
    {
        return begin_getLatestGpsRecordByImei(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getLatestGpsRecordByImei(LatestGpsGetRequestWithBindTime req, java.util.Map<String, String> __ctx, Callback_DaoGpsService_getLatestGpsRecordByImei __cb)
    {
        return begin_getLatestGpsRecordByImei(req, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getLatestGpsRecordByImei(LatestGpsGetRequestWithBindTime req, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getLatestGpsRecordByImei_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getLatestGpsRecordByImei_name, __cb);
        try
        {
            __result.__prepare(__getLatestGpsRecordByImei_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            req.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getLatestGpsRecordByImei(LatestGpsGetResponseHolder res, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getLatestGpsRecordByImei_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            res.value = new LatestGpsGetResponse();
            res.value.__read(__is);
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getLatestGpsRecordByMapSn_name = "getLatestGpsRecordByMapSn";

    public boolean getLatestGpsRecordByMapSn(LatestGpsGetRequest req, LatestGpsGetResponseHolder res)
    {
        return getLatestGpsRecordByMapSn(req, res, null, false);
    }

    public boolean getLatestGpsRecordByMapSn(LatestGpsGetRequest req, LatestGpsGetResponseHolder res, java.util.Map<String, String> __ctx)
    {
        return getLatestGpsRecordByMapSn(req, res, __ctx, true);
    }

    private boolean getLatestGpsRecordByMapSn(LatestGpsGetRequest req, LatestGpsGetResponseHolder res, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getLatestGpsRecordByMapSn", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getLatestGpsRecordByMapSn");
                    __delBase = __getDelegate(false);
                    _DaoGpsServiceDel __del = (_DaoGpsServiceDel)__delBase;
                    return __del.getLatestGpsRecordByMapSn(req, res, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getLatestGpsRecordByMapSn(LatestGpsGetRequest req)
    {
        return begin_getLatestGpsRecordByMapSn(req, null, false, null);
    }

    public Ice.AsyncResult begin_getLatestGpsRecordByMapSn(LatestGpsGetRequest req, java.util.Map<String, String> __ctx)
    {
        return begin_getLatestGpsRecordByMapSn(req, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getLatestGpsRecordByMapSn(LatestGpsGetRequest req, Ice.Callback __cb)
    {
        return begin_getLatestGpsRecordByMapSn(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getLatestGpsRecordByMapSn(LatestGpsGetRequest req, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getLatestGpsRecordByMapSn(req, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getLatestGpsRecordByMapSn(LatestGpsGetRequest req, Callback_DaoGpsService_getLatestGpsRecordByMapSn __cb)
    {
        return begin_getLatestGpsRecordByMapSn(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getLatestGpsRecordByMapSn(LatestGpsGetRequest req, java.util.Map<String, String> __ctx, Callback_DaoGpsService_getLatestGpsRecordByMapSn __cb)
    {
        return begin_getLatestGpsRecordByMapSn(req, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getLatestGpsRecordByMapSn(LatestGpsGetRequest req, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getLatestGpsRecordByMapSn_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getLatestGpsRecordByMapSn_name, __cb);
        try
        {
            __result.__prepare(__getLatestGpsRecordByMapSn_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            req.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getLatestGpsRecordByMapSn(LatestGpsGetResponseHolder res, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getLatestGpsRecordByMapSn_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            res.value = new LatestGpsGetResponse();
            res.value.__read(__is);
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getLatestLocationByLbsRecord_name = "getLatestLocationByLbsRecord";

    public boolean getLatestLocationByLbsRecord(LatestGpsGetRequest req, LatestGpsGetResponseHolder res)
    {
        return getLatestLocationByLbsRecord(req, res, null, false);
    }

    public boolean getLatestLocationByLbsRecord(LatestGpsGetRequest req, LatestGpsGetResponseHolder res, java.util.Map<String, String> __ctx)
    {
        return getLatestLocationByLbsRecord(req, res, __ctx, true);
    }

    private boolean getLatestLocationByLbsRecord(LatestGpsGetRequest req, LatestGpsGetResponseHolder res, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getLatestLocationByLbsRecord", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getLatestLocationByLbsRecord");
                    __delBase = __getDelegate(false);
                    _DaoGpsServiceDel __del = (_DaoGpsServiceDel)__delBase;
                    return __del.getLatestLocationByLbsRecord(req, res, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getLatestLocationByLbsRecord(LatestGpsGetRequest req)
    {
        return begin_getLatestLocationByLbsRecord(req, null, false, null);
    }

    public Ice.AsyncResult begin_getLatestLocationByLbsRecord(LatestGpsGetRequest req, java.util.Map<String, String> __ctx)
    {
        return begin_getLatestLocationByLbsRecord(req, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getLatestLocationByLbsRecord(LatestGpsGetRequest req, Ice.Callback __cb)
    {
        return begin_getLatestLocationByLbsRecord(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getLatestLocationByLbsRecord(LatestGpsGetRequest req, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getLatestLocationByLbsRecord(req, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getLatestLocationByLbsRecord(LatestGpsGetRequest req, Callback_DaoGpsService_getLatestLocationByLbsRecord __cb)
    {
        return begin_getLatestLocationByLbsRecord(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getLatestLocationByLbsRecord(LatestGpsGetRequest req, java.util.Map<String, String> __ctx, Callback_DaoGpsService_getLatestLocationByLbsRecord __cb)
    {
        return begin_getLatestLocationByLbsRecord(req, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getLatestLocationByLbsRecord(LatestGpsGetRequest req, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getLatestLocationByLbsRecord_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getLatestLocationByLbsRecord_name, __cb);
        try
        {
            __result.__prepare(__getLatestLocationByLbsRecord_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            req.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getLatestLocationByLbsRecord(LatestGpsGetResponseHolder res, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getLatestLocationByLbsRecord_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            res.value = new LatestGpsGetResponse();
            res.value.__read(__is);
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getLatestRgpsRecord_name = "getLatestRgpsRecord";

    public boolean getLatestRgpsRecord(LatestRgpsGetRequest req, LatestRgpsGetResponseHolder res)
    {
        return getLatestRgpsRecord(req, res, null, false);
    }

    public boolean getLatestRgpsRecord(LatestRgpsGetRequest req, LatestRgpsGetResponseHolder res, java.util.Map<String, String> __ctx)
    {
        return getLatestRgpsRecord(req, res, __ctx, true);
    }

    private boolean getLatestRgpsRecord(LatestRgpsGetRequest req, LatestRgpsGetResponseHolder res, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getLatestRgpsRecord", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getLatestRgpsRecord");
                    __delBase = __getDelegate(false);
                    _DaoGpsServiceDel __del = (_DaoGpsServiceDel)__delBase;
                    return __del.getLatestRgpsRecord(req, res, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getLatestRgpsRecord(LatestRgpsGetRequest req)
    {
        return begin_getLatestRgpsRecord(req, null, false, null);
    }

    public Ice.AsyncResult begin_getLatestRgpsRecord(LatestRgpsGetRequest req, java.util.Map<String, String> __ctx)
    {
        return begin_getLatestRgpsRecord(req, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getLatestRgpsRecord(LatestRgpsGetRequest req, Ice.Callback __cb)
    {
        return begin_getLatestRgpsRecord(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getLatestRgpsRecord(LatestRgpsGetRequest req, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getLatestRgpsRecord(req, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getLatestRgpsRecord(LatestRgpsGetRequest req, Callback_DaoGpsService_getLatestRgpsRecord __cb)
    {
        return begin_getLatestRgpsRecord(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getLatestRgpsRecord(LatestRgpsGetRequest req, java.util.Map<String, String> __ctx, Callback_DaoGpsService_getLatestRgpsRecord __cb)
    {
        return begin_getLatestRgpsRecord(req, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getLatestRgpsRecord(LatestRgpsGetRequest req, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getLatestRgpsRecord_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getLatestRgpsRecord_name, __cb);
        try
        {
            __result.__prepare(__getLatestRgpsRecord_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            req.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getLatestRgpsRecord(LatestRgpsGetResponseHolder res, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getLatestRgpsRecord_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            res.value = new LatestRgpsGetResponse();
            res.value.__read(__is);
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getLatestVolRecord_name = "getLatestVolRecord";

    public boolean getLatestVolRecord(LatestVoltageGetRequest req, LatestVoltageGetResponseHolder res)
    {
        return getLatestVolRecord(req, res, null, false);
    }

    public boolean getLatestVolRecord(LatestVoltageGetRequest req, LatestVoltageGetResponseHolder res, java.util.Map<String, String> __ctx)
    {
        return getLatestVolRecord(req, res, __ctx, true);
    }

    private boolean getLatestVolRecord(LatestVoltageGetRequest req, LatestVoltageGetResponseHolder res, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getLatestVolRecord", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getLatestVolRecord");
                    __delBase = __getDelegate(false);
                    _DaoGpsServiceDel __del = (_DaoGpsServiceDel)__delBase;
                    return __del.getLatestVolRecord(req, res, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getLatestVolRecord(LatestVoltageGetRequest req)
    {
        return begin_getLatestVolRecord(req, null, false, null);
    }

    public Ice.AsyncResult begin_getLatestVolRecord(LatestVoltageGetRequest req, java.util.Map<String, String> __ctx)
    {
        return begin_getLatestVolRecord(req, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getLatestVolRecord(LatestVoltageGetRequest req, Ice.Callback __cb)
    {
        return begin_getLatestVolRecord(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getLatestVolRecord(LatestVoltageGetRequest req, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getLatestVolRecord(req, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getLatestVolRecord(LatestVoltageGetRequest req, Callback_DaoGpsService_getLatestVolRecord __cb)
    {
        return begin_getLatestVolRecord(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getLatestVolRecord(LatestVoltageGetRequest req, java.util.Map<String, String> __ctx, Callback_DaoGpsService_getLatestVolRecord __cb)
    {
        return begin_getLatestVolRecord(req, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getLatestVolRecord(LatestVoltageGetRequest req, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getLatestVolRecord_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getLatestVolRecord_name, __cb);
        try
        {
            __result.__prepare(__getLatestVolRecord_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            req.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getLatestVolRecord(LatestVoltageGetResponseHolder res, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getLatestVolRecord_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            res.value = new LatestVoltageGetResponse();
            res.value.__read(__is);
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getMaxVolDiff_name = "getMaxVolDiff";

    public boolean getMaxVolDiff(DiffVoltageGetRequest req, DiffVoltageGetResponseHolder res)
    {
        return getMaxVolDiff(req, res, null, false);
    }

    public boolean getMaxVolDiff(DiffVoltageGetRequest req, DiffVoltageGetResponseHolder res, java.util.Map<String, String> __ctx)
    {
        return getMaxVolDiff(req, res, __ctx, true);
    }

    private boolean getMaxVolDiff(DiffVoltageGetRequest req, DiffVoltageGetResponseHolder res, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getMaxVolDiff", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getMaxVolDiff");
                    __delBase = __getDelegate(false);
                    _DaoGpsServiceDel __del = (_DaoGpsServiceDel)__delBase;
                    return __del.getMaxVolDiff(req, res, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getMaxVolDiff(DiffVoltageGetRequest req)
    {
        return begin_getMaxVolDiff(req, null, false, null);
    }

    public Ice.AsyncResult begin_getMaxVolDiff(DiffVoltageGetRequest req, java.util.Map<String, String> __ctx)
    {
        return begin_getMaxVolDiff(req, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getMaxVolDiff(DiffVoltageGetRequest req, Ice.Callback __cb)
    {
        return begin_getMaxVolDiff(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getMaxVolDiff(DiffVoltageGetRequest req, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getMaxVolDiff(req, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getMaxVolDiff(DiffVoltageGetRequest req, Callback_DaoGpsService_getMaxVolDiff __cb)
    {
        return begin_getMaxVolDiff(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getMaxVolDiff(DiffVoltageGetRequest req, java.util.Map<String, String> __ctx, Callback_DaoGpsService_getMaxVolDiff __cb)
    {
        return begin_getMaxVolDiff(req, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getMaxVolDiff(DiffVoltageGetRequest req, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getMaxVolDiff_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getMaxVolDiff_name, __cb);
        try
        {
            __result.__prepare(__getMaxVolDiff_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            req.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getMaxVolDiff(DiffVoltageGetResponseHolder res, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getMaxVolDiff_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            res.value = new DiffVoltageGetResponse();
            res.value.__read(__is);
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getRecentBsRecords_name = "getRecentBsRecords";

    public boolean getRecentBsRecords(RecentBsGetRequest req, RecentBsGetResponseHolder res)
    {
        return getRecentBsRecords(req, res, null, false);
    }

    public boolean getRecentBsRecords(RecentBsGetRequest req, RecentBsGetResponseHolder res, java.util.Map<String, String> __ctx)
    {
        return getRecentBsRecords(req, res, __ctx, true);
    }

    private boolean getRecentBsRecords(RecentBsGetRequest req, RecentBsGetResponseHolder res, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getRecentBsRecords", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getRecentBsRecords");
                    __delBase = __getDelegate(false);
                    _DaoGpsServiceDel __del = (_DaoGpsServiceDel)__delBase;
                    return __del.getRecentBsRecords(req, res, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getRecentBsRecords(RecentBsGetRequest req)
    {
        return begin_getRecentBsRecords(req, null, false, null);
    }

    public Ice.AsyncResult begin_getRecentBsRecords(RecentBsGetRequest req, java.util.Map<String, String> __ctx)
    {
        return begin_getRecentBsRecords(req, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getRecentBsRecords(RecentBsGetRequest req, Ice.Callback __cb)
    {
        return begin_getRecentBsRecords(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getRecentBsRecords(RecentBsGetRequest req, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getRecentBsRecords(req, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getRecentBsRecords(RecentBsGetRequest req, Callback_DaoGpsService_getRecentBsRecords __cb)
    {
        return begin_getRecentBsRecords(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getRecentBsRecords(RecentBsGetRequest req, java.util.Map<String, String> __ctx, Callback_DaoGpsService_getRecentBsRecords __cb)
    {
        return begin_getRecentBsRecords(req, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getRecentBsRecords(RecentBsGetRequest req, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getRecentBsRecords_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getRecentBsRecords_name, __cb);
        try
        {
            __result.__prepare(__getRecentBsRecords_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            req.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getRecentBsRecords(RecentBsGetResponseHolder res, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getRecentBsRecords_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            res.value = new RecentBsGetResponse();
            res.value.__read(__is);
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getRecentGpsRecords_name = "getRecentGpsRecords";

    public boolean getRecentGpsRecords(RecentGpsGetRequest req, RecentGpsGetResponseHolder res)
    {
        return getRecentGpsRecords(req, res, null, false);
    }

    public boolean getRecentGpsRecords(RecentGpsGetRequest req, RecentGpsGetResponseHolder res, java.util.Map<String, String> __ctx)
    {
        return getRecentGpsRecords(req, res, __ctx, true);
    }

    private boolean getRecentGpsRecords(RecentGpsGetRequest req, RecentGpsGetResponseHolder res, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getRecentGpsRecords", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getRecentGpsRecords");
                    __delBase = __getDelegate(false);
                    _DaoGpsServiceDel __del = (_DaoGpsServiceDel)__delBase;
                    return __del.getRecentGpsRecords(req, res, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getRecentGpsRecords(RecentGpsGetRequest req)
    {
        return begin_getRecentGpsRecords(req, null, false, null);
    }

    public Ice.AsyncResult begin_getRecentGpsRecords(RecentGpsGetRequest req, java.util.Map<String, String> __ctx)
    {
        return begin_getRecentGpsRecords(req, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getRecentGpsRecords(RecentGpsGetRequest req, Ice.Callback __cb)
    {
        return begin_getRecentGpsRecords(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getRecentGpsRecords(RecentGpsGetRequest req, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getRecentGpsRecords(req, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getRecentGpsRecords(RecentGpsGetRequest req, Callback_DaoGpsService_getRecentGpsRecords __cb)
    {
        return begin_getRecentGpsRecords(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getRecentGpsRecords(RecentGpsGetRequest req, java.util.Map<String, String> __ctx, Callback_DaoGpsService_getRecentGpsRecords __cb)
    {
        return begin_getRecentGpsRecords(req, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getRecentGpsRecords(RecentGpsGetRequest req, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getRecentGpsRecords_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getRecentGpsRecords_name, __cb);
        try
        {
            __result.__prepare(__getRecentGpsRecords_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            req.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getRecentGpsRecords(RecentGpsGetResponseHolder res, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getRecentGpsRecords_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            res.value = new RecentGpsGetResponse();
            res.value.__read(__is);
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getSnMapRecords_name = "getSnMapRecords";

    public boolean getSnMapRecords(Sn2DdMapGetReq req, Sn2DdMapGetResponseHolder res)
    {
        return getSnMapRecords(req, res, null, false);
    }

    public boolean getSnMapRecords(Sn2DdMapGetReq req, Sn2DdMapGetResponseHolder res, java.util.Map<String, String> __ctx)
    {
        return getSnMapRecords(req, res, __ctx, true);
    }

    private boolean getSnMapRecords(Sn2DdMapGetReq req, Sn2DdMapGetResponseHolder res, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getSnMapRecords", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getSnMapRecords");
                    __delBase = __getDelegate(false);
                    _DaoGpsServiceDel __del = (_DaoGpsServiceDel)__delBase;
                    return __del.getSnMapRecords(req, res, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getSnMapRecords(Sn2DdMapGetReq req)
    {
        return begin_getSnMapRecords(req, null, false, null);
    }

    public Ice.AsyncResult begin_getSnMapRecords(Sn2DdMapGetReq req, java.util.Map<String, String> __ctx)
    {
        return begin_getSnMapRecords(req, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getSnMapRecords(Sn2DdMapGetReq req, Ice.Callback __cb)
    {
        return begin_getSnMapRecords(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getSnMapRecords(Sn2DdMapGetReq req, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getSnMapRecords(req, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getSnMapRecords(Sn2DdMapGetReq req, Callback_DaoGpsService_getSnMapRecords __cb)
    {
        return begin_getSnMapRecords(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getSnMapRecords(Sn2DdMapGetReq req, java.util.Map<String, String> __ctx, Callback_DaoGpsService_getSnMapRecords __cb)
    {
        return begin_getSnMapRecords(req, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getSnMapRecords(Sn2DdMapGetReq req, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getSnMapRecords_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getSnMapRecords_name, __cb);
        try
        {
            __result.__prepare(__getSnMapRecords_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            req.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getSnMapRecords(Sn2DdMapGetResponseHolder res, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getSnMapRecords_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            res.value = new Sn2DdMapGetResponse();
            res.value.__read(__is);
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getVoltageRecords_name = "getVoltageRecords";

    public boolean getVoltageRecords(VoltageGetRequest req, VoltageGetResponseHolder res)
    {
        return getVoltageRecords(req, res, null, false);
    }

    public boolean getVoltageRecords(VoltageGetRequest req, VoltageGetResponseHolder res, java.util.Map<String, String> __ctx)
    {
        return getVoltageRecords(req, res, __ctx, true);
    }

    private boolean getVoltageRecords(VoltageGetRequest req, VoltageGetResponseHolder res, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getVoltageRecords", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getVoltageRecords");
                    __delBase = __getDelegate(false);
                    _DaoGpsServiceDel __del = (_DaoGpsServiceDel)__delBase;
                    return __del.getVoltageRecords(req, res, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getVoltageRecords(VoltageGetRequest req)
    {
        return begin_getVoltageRecords(req, null, false, null);
    }

    public Ice.AsyncResult begin_getVoltageRecords(VoltageGetRequest req, java.util.Map<String, String> __ctx)
    {
        return begin_getVoltageRecords(req, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getVoltageRecords(VoltageGetRequest req, Ice.Callback __cb)
    {
        return begin_getVoltageRecords(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getVoltageRecords(VoltageGetRequest req, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getVoltageRecords(req, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getVoltageRecords(VoltageGetRequest req, Callback_DaoGpsService_getVoltageRecords __cb)
    {
        return begin_getVoltageRecords(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_getVoltageRecords(VoltageGetRequest req, java.util.Map<String, String> __ctx, Callback_DaoGpsService_getVoltageRecords __cb)
    {
        return begin_getVoltageRecords(req, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getVoltageRecords(VoltageGetRequest req, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getVoltageRecords_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getVoltageRecords_name, __cb);
        try
        {
            __result.__prepare(__getVoltageRecords_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            req.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_getVoltageRecords(VoltageGetResponseHolder res, Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getVoltageRecords_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            res.value = new VoltageGetResponse();
            res.value.__read(__is);
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public static DaoGpsServicePrx checkedCast(Ice.ObjectPrx __obj)
    {
        DaoGpsServicePrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof DaoGpsServicePrx)
            {
                __d = (DaoGpsServicePrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    DaoGpsServicePrxHelper __h = new DaoGpsServicePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static DaoGpsServicePrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        DaoGpsServicePrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof DaoGpsServicePrx)
            {
                __d = (DaoGpsServicePrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    DaoGpsServicePrxHelper __h = new DaoGpsServicePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static DaoGpsServicePrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        DaoGpsServicePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    DaoGpsServicePrxHelper __h = new DaoGpsServicePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static DaoGpsServicePrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        DaoGpsServicePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    DaoGpsServicePrxHelper __h = new DaoGpsServicePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static DaoGpsServicePrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        DaoGpsServicePrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof DaoGpsServicePrx)
            {
                __d = (DaoGpsServicePrx)__obj;
            }
            else
            {
                DaoGpsServicePrxHelper __h = new DaoGpsServicePrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static DaoGpsServicePrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        DaoGpsServicePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            DaoGpsServicePrxHelper __h = new DaoGpsServicePrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::HDaoGps::DaoGpsService",
        "::Ice::Object"
    };

    public static String ice_staticId()
    {
        return __ids[0];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _DaoGpsServiceDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _DaoGpsServiceDelD();
    }

    public static void __write(IceInternal.BasicStream __os, DaoGpsServicePrx v)
    {
        __os.writeProxy(v);
    }

    public static DaoGpsServicePrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            DaoGpsServicePrxHelper result = new DaoGpsServicePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
